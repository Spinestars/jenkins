
@Library("devopslib@master") _

def mytools = new org.devops.mytools()
def builds  = new org.devops.builds()
def sonar   = new org.devops.sonarqube()
def artifacts = new org.devops.artifacts()
def gitlab = new org.devops.gitlab()

def buildTools = [  "maven" : "/usr/local/apache-maven-3.8.1",
                    "gradle": "/usr/local/gradle-6.8.3/",
                    "golang": "/usr/local/go",
                    "npm"   : "/usr/local/node-v14.16.1-linux-x64/",
                    "sonar" : "/usr/local/sonar-scanner-4.6.0.2311-linux/"]

//UI上面的参数
String branchName = "${env.branchName}"
String gitHttpURL = "${env.gitHttpURL}"
String buildType  = "${env.buildType}"
String skipSonar  = "${env.skipSonar}"
String repoName   = "${JOB_NAME.split('/')[0]}"


// 业务名称、应用名称、版本
String buName = "${JOB_NAME.split('/')[0]}"
String appName = "${JOB_NAME.split('/')[1].split("_")[0]}"
String releaseVersion = "${branchName.split('-')[1]}"



pipeline {
    agent { label  "build" }    
    options {
        skipDefaultCheckout true
    }

    stages {
        stage("GetCode"){
            steps{
                script{
                    mytools.GetCode("git",branchName,gitHttpURL)
                }
            }
            
        }

        stage("Build"){
            steps {
                script {
                    builds.Build(buildTools, buildType)
                }
            }
        }

        stage("SonarScan"){
            when {
                environment name: 'skipSonar', value: 'false'
            }
            steps{
                script{
                    projectName = "${appName}"
                    sonar.SonarScan(projectName, buildType, buildTools)
                }
            }
        }

        stage("PushImage"){
            steps{
                script{

                    withCredentials([usernamePassword(credentialsId: '6ed6e3ef-fdca-493f-a8a4-613f70aca281', passwordVariable: 'password', usernameVariable: 'username')]) {
                
                         env.nowDate = sh  returnStdout: true, script: 'date  +%Y%m%d%H%M%S'
                         env.nowDate = env.nowDate - "\n"

                         env.releaseVersion = "${env.branchName}"
                         env.imageTag = "${releaseVersion}-${nowDate}"
                         env.repository = "registry.cn-beijing.aliyuncs.com/${buName}/${appName}"
                         env.dockerImage = "${env.repository}:${env.imageTag}"
        
                         sh """
                             docker login -u ${username} -p ${password}  registry.cn-beijing.aliyuncs.com
                             docker build -t ${dockerImage} -f ./Dockerfile  .
                             sleep 1
                             docker push ${dockerImage}
                             sleep 1
                             docker rmi ${dockerImage}
                          """
                    }
                }
            }
        }

        stage("ReleaseFile"){
            steps {
                script {
          
                    //下载版本库文件 anyops-devopshelm-ui/values.yaml
                    response = gitlab.GetRepoFile(14,"${appName}%2fvalues.yaml", "master")

                    yamlData = readYaml text: """${response}"""

                    println(yamlData)
                    yamlData.image.repository   = "${env.repository}"
                    yamlData.image.tag  = "${env.imageTag}"
                    
                    sh "rm -fr default.yaml"
                    writeYaml charset: 'UTF-8', data: yamlData, file: 'default.yaml'

                    newYaml = sh returnStdout: true, script: 'cat default.yaml'
                    
                    println(newYaml)
                    //更新gitlab文件内容
                    base64Content = newYaml.bytes.encodeBase64().toString()

                    // 会有并行问题，同时更新报错
                    try {
                        gitlab.UpdateRepoFile(14,"${appName}%2fvalues.yaml",base64Content, "master")
                    } catch(e){
                        gitlab.CreateRepoFile(14,"${appName}%2fvalues.yaml",base64Content, "master")
                    }
                }
            }
        }
    }

    post {
        always {
            script{
                echo "always......"
                cleanWs()
            }
        }

        success {
            script {
                echo "success....."
            }
        }
    }
}
